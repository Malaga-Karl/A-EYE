test_item,result
"onboard
captain(){
 pint objects = load(""enter number of objects: "");
 fire(objects);
 fire("" objects can be equally distributed with "");
 fire(objects // 5);
 fire("" objects per person"");
}

offboard",
"onboard
captain(){
 pint age = load(""Enter your age:"");
 pint age5 = age + 5;
 
 fire(""Your age after 5 years is "");
 fire(age5);
}
offboard",
"onboard
captain(){
loyal fleet f = 0.02;
loyal pint n = 10;
fleet money = load(""enter money: "");
fleet inflated = money * ((1+f)** n);

fire(inflated);
}
offboard",
"onboard
captain(){
pint your_score = load(""enter your score: "");
pint total_items = load(""total items: "");

fire(""your grade is "");
fire(your_score/total_items);
}
offboard",
"onboard
captain(){
doffy password = ""password"";
doffy attempt = load(""enter password: "");
theo(attempt == password){
fire(""passsed!"");
}

alt {
fire(""failed!"");
}
}
offboard",
"onboard
void greetings(doffy name){
 fire(""Hi my name is "");
 fire(name);
}
captain(){
 doffy name = load(""Enter your name: "");
 greetings(name);
}
offboard",
"onboard
captain(){
 doffy word = load(""Enter Word: "");
 
 fire(""The length of the word is: "");
 fire(len(word));
}
offboard",
"onboard
captain(){
 
 pint num1 = load(""Enter the first number: "");
 pint num2 = load(""Enter the second number: "");
 pint num3 = load(""Enter the third number: "");
 pint num4 = load(""Enter the fourth number: "");
 pint num5 = load(""Enter the fifth number: "");
 pint num6 = load(""Enter the sixth number: "");
 pint num7 = load(""Enter the seventh number: "");
 pint max_num = 0;

 theo (num1 >= num2 and num1 >= num3 and num1 >= num4 and num1 >= num5 and num1 >= num6 and num1 >= num7){
 max_num = num1;
 } 
 altheo(num2 >= num1 and num2 >= num3 and num2 >= num4 and num2 >= num5 and num2 >= num6 and num2 >= num7){
 max_num = num2;
 }
 altheo(num3 >= num1 and num3 >= num2 and num3 >= num4 and num3 >= num5 and num3 >= num6 and num3 >= num7){
 max_num = num3;
 }
 altheo(num4 >= num1 and num4 >= num2 and num4 >= num3 and num4 >= num5 and num4 >= num6 and num4 >= num7){
 max_num = num4;
 }
 altheo(num5 >= num1 and num5 >= num2 and num5 >= num3 and num5 >= num4 and num5 >= num6 and num5 >= num7){
 max_num = num5;
 }
 altheo(num6 >= num1 and num6 >= num2 and num6 >= num3 and num6 >= num4 and num6 >= num5 and num6 >= num7){
 max_num = num6;
 }
 alt{
 max_num = num7;
 }

 fire(""The maximum number among "");
 fire(num1);
 fire("", "");
 fire(num2);
 fire("", "");
 fire(num3);
 fire("", "");
 fire(num4);
 fire("", "");
 fire(num5);
 fire("", "");
 fire(num6);
 fire("" and "");
 fire(num7);
 fire("" is: "");
 fire(max_num);
}
offboard",
"onboard
captain(){
 
 fleet celsius = load(""Enter the temperature in Celsius: "");
 fleet newton = 0.0;

 newton = celsius * 0.33;

 fire(celsius);
 fire("" Celsius is equal to "");
 fire(newton);
 fire("" Newton."");
}
offboard",
"onboard

captain() {
 fleet yards = load(""Enter the number of yards: "");
 fleet kilometers = 0.0;
 
 kilometers = yards * 0.0009144; 

 fire(yards10);
 fire("" yards is equal to "");
 fire(kilometers);
 fire("" kilometers."");
}
offboard",
"onboard
loyal fleet pi = 3.14;
captain(){
 fleet radius = load(""Enter the radius of the circle: "");

 fleet area = pi * radius * radius;
 
 fire(""The area of the circle is: "");
 fire(area);
 }
offboard",
"onboard
captain() {
 fleet mexicanPeso = load(""Enter the amount in Mexican Peso (MXN): "");
 fleet philippinePeso = 0;
 fleet exchangeRate = 0.25; 

 philippinePeso = mexicanPeso * exchangeRate;

 fire(philippinePeso);

}
offboard",
"onboard
captain(){
 doffy string1 = load(""Enter first string: "");
 doffy string2 = load(""Enter second string: "");
 doffy string3 = load(""Enter third string: "");
 
 fire(""Concatenated string: "");
 fire(string1 + string2 + string3);
}
offboard",
"onboard 
loyal fleet pi = 3.14;
captain(){
 fleet radius = load(""Enter the radius of the cylinder base: "");
 fleet height = load(""Enter the height of the cylinder: "");
 
 fleet volume = pi * radius * radius * height;
 
 fire(""The volume of the cylinder is: "");
 fire(volume);
}
offboard",
"onboard 
captain(){
 fleet distance = load(""Enter the distance traveled in kilometers: "");
 fleet time = load(""Enter the time taken to travel in hours: "");
 
 fleet speed = distance / time;
 
 fire(""The average speed is: "");
 fire(speed);
}
offboard",
"onboard 
captain(){
 fleet kilometers = load(""Enter length in kilometers: "");
 fleet yard = 0;
 yard = kilometers * 1093.61;
 fire(kilometers);
 fire("" kilometers is "");
 fire(yard);
 fire("" in yards"");
 }
offboard",
"onboard 
captain(){
 pint current_year = 2024;
 pint birth_year = load(""Enter your birth year: "");
 pint age = 0;
 age = current_year - birth_year;
 fire(""Your current age is "");
 fire(age);
 fire("" years old"");
 }
offboard",
"onboard 
captain(){
 fleet feet = load(""Enter length in feet: "");
 fleet inches = 0;
 inches = feet * 12.0;
 fire(feet);
 fire("" feet is "");
 fire(inches);
 fire("" in inches"");
 }
offboard",
"onboard 
captain(){
 pint num = load(""Enter a number: "");
 pint squared = num**2;
 fire(""The square of "");
 fire(num); 
 fire("" is "");
 fire(squared);
 }
offboard",
"onboard 
captain(){
 fleet step = load(""Enter number of steps: "");
 fleet cal = 0;
 cal = step*0.04;
 fire(""Calories burned: "");
 fire(cal);
 }
offboard",
"onboard
captain(){
 fleet base1 = load(""Enter length of Base 1: "");
 fleet base2 = load(""Enter length of Base 2: "");
 fleet height = load(""Enter height: "");
 
 fleet area = (0.5 * (base1 + base2)) * height;
 
 fire(""The area of the Trapezoid is: "");
 fire(area); 
}
offboard",
"onboard
captain() {
 doffy resp = load(""Are you smiling? Y/N: "");
 
 theo(resp == ""Y"" oro resp == ""y"") {
 fire(""User is Smiling! "");
 } 
 alt {
 fire(""User is not Smiling! :|"");
 }
}
offboard",
"onboard
captain() {
 doffy resp = load(""Did you feed your Pet?[Y/N]: "");
 
 theo(resp == ""Y"" oro resp == ""y"") {
 fire(""Your pet is full! "");
 } 
 alt {
 fire(""Danger! Your pet might be hungry!n"");
 }
}
offboard",
"onboard
captain() {
 doffy address = load(""Hello User! Where do you live?: "");
 
 fire(""The user lives in "");
 fire(address);
}
offboard",
"onboard
captain(){
 pint num1 = load(""Input 1st Integer: "");
 pint num2 = load(""Input 2nd Integer: "");
 pint num3 = load(""Input 3rd Integer: "");

 fleet ave = (num1 + num2 + num3) / 3;
 fire(ave);
}
offboard",
"onboard
captain(){
 doffy firstName = load(""Enter your first name: "");
 doffy lastName = load(""Enter your last name: "");
 
 fire(""Your initials are: "");
 fire(firstName[0]);
 fire(lastName[0]);
}
offboard",
"onboard
captain(){
 doffy word1 = load(""Enter the 1st word: "");
 doffy word2 = load(""Enter the 2nd word: "");
 doffy word3 = load(""Enter the 3rd word: "");
 doffy word4 = load(""Enter the 4th word: "");
 
 doffy longest = word1;
 doffy shortest = word1;
 
 theo(len(word2) > len(longest)){
 longest = word2;
 }
 theo(len(word2) < len(shortest)){
 shortest = word2;
 } 
 theo(len(word3) > len(longest)){
 longest = word3;
 } 
 theo(len(word3) < len(shortest)){
 shortest = word3;
 }
 theo(len(word4) > len(longest)){
 longest = word4;
 }
 theo(len(word4) < len(shortest)){
 shortest = word4;
 }

 fire(""Longest word: "");
 fire(longest);
 fire(""\nShortest word: "");
 fire(shortest);
}
offboard",
"onboard
captain(){
 fleet usd = load(""Input the amount in USD: "");
 fleet peso = 58.2;

 fleet convert = usd * peso;
 fire(convert);
}
offboard",
"onboard
captain(){
 fleet pAmount = load(""Input Principal Amount: "");
 fleet rInterest = load(""Input Interest Rate: "");
 fleet tYear = load(""Input time(in years): "");

 fleet sInterest = (pAmount * rInterest * tYear) / 100.0;
 fire(sInterest);
}
offboard",
"onboard
captain(){
pint stations = load(""enter stations: "");
pint price=20;
theo(stations <= 2){
price = 0;
}

alt{
price = price + ((stations - 2)*5);
}

fire(""price: "");
fire(price);
}
offboard",
"onboard
captain(){
loyal pint full = 100;
pint current = load(""current fuel over 100: "");
theo(current > 100){
fire(""enter a number less than or equal to 100"");
}
altheo(current/full < 0.15){
fire(""refuel!"");
}
alt {
fire(""no need"");
}
}
offboard",
"onboard
captain(){
doffy player1 = load(""[r]ock [p]aper [s]cissor: "");
doffy player2 = load(""[r]ock [p]aper [s]cissor: "");

theo(player1 == ""r"" and player2 == ""s"" oro player1 == ""p"" and player2 == ""r"" oro player1 == ""s"" and player2 == ""p""){
fire(""player 1 wins!"");
}

altheo(player2 == ""r"" and player1 == ""s"" oro player2 == ""p"" and player1 == ""r"" oro player2 == ""s"" and player1 == ""p""){
fire(""player 2 wins!"");
}

alt {
fire(""tie or invalid input"");
}
}
offboard",
"onboard
captain(){
pint n = load(""pick a number from 1-5: "");

helm(n){
chest 1: fire(""you selected 1!"");
chest 2: fire(""2 is my favorite number!"");
chest 3: fire(""3 is the magic number!"");
chest 4: fire(""I don't like 4"");
chest 5: fire(""last number"");
dagger: fire(""i dont think you followed instructions"");
}
}
offboard",
"onboard
captain(){
doffy day = load(""Enter day: "");

theo(day == ""Monday"" oro day == ""Tuesday"" oro day == ""Wednesday"" oro day == ""Thursday"" oro day == ""Friday""){
fire(""It is a weekday."");
}
alt{
fire(""It is a weekend."");
}
}
offboard",
"onboard
captain(){
 pint num1 = load(""Enter first number: "");
 pint num2 = load(""Enter second number: "");
 pint num3 = load(""Enter third number: "");
 
 theo(num1 == num2 and num2 == num3){
 fire(""All values are the same."");
 }
 alt{
 fire(""Values are not the same."");
 }
 }
offboard",
"onboard
captain(){
 doffy color = load(""Select color Red-Green-Yellow: "");

 helm(color){
 chest ""Red"":fire(""It means STOP."");
 chest ""Green"":fire(""It means GO.""); 
 chest ""Yellow"":fire(""it means Prepare to STOP/GO"");
 

 dagger:fire(""Invalid Input."");
 
 }
 }
offboard",
"onboard
captain(){
 pint year = load(""Enter your year: "");
 
 helm(year){
 chest 1: fire(""You are Freshman."");
 chest 2: fire(""You are Sophomore."");
 chest 3: fire(""You are Juniors."");
 chest 4: fire(""You are Senior."");
 
 dagger: fire(""Invalid Input"");
 }
}
offboard",
"onboard
captain(){
 pint num1 = load(""Enter num1: "");
 pint num2 = load(""Enter num2: "");
 pint num3 = load(""Enter num3: ""); 
 pint largest = 0;
 
 theo(num1 > num2 and num1 > num3){
 largest = num1;
 fire(largest);
 } 
 altheo(num2 > num3 and num2 > num1){
 largest = num2;
 fire(largest);
 }
 alt{
 largest = num3;
 fire(largest);
 }
 }
offboard",
"onboard


captain() {
 pint number = load(""Enter a number: "");
 doffy range = """";
 
 theo (number >= 10 and number < 20) {
 fire(""You are in range 10's.""); 
 } 
 
 altheo (number >= 20 and number < 30) {
 fire(""You are in range 20's."");
 } 
 
 altheo (number >= 30 and number < 40) {
 fire(""You are in range 30's."");
 } 
 
 altheo (number >= 40 and number < 50) {
 fire(""You are in range 40's."");
 } 
 
 altheo (number >= 50 and number < 60) {
 fire(""You are in range 50's."");
 } 
 
 altheo (number >= 60 and number < 70) {
 fire(""You are in range 60's."");
 
 }
 
 altheo (number >= 70 and number < 80) {
 fire(""You are in range 70's."");
 }
 
 altheo (number >= 80 and number < 90) {
 fire(""You are in range 80's."");
 } 
 
 altheo (number >= 90 and number < 100) {
 fire(""You are in range 10's."");
 } 
 
 alt {
 fire(""out of range (10s to 90s)"");
 }
 
}
offboard",
"onboard
captain() {

 pint paper = load(""Enter the amount of paper (in inches): "");

 pint ink = load(""Enter the amount of ink (in milliliters): "");

 theo (ink > 0) {
 fire(""You will see the ink on the paper.\n"");
 }
 alt{
 fire(""You will not see the ink on the paper.\n"");
 }
}
offboard",
"onboard
captain() {
 pint number = load(""Enter a number: "");

 theo (number % 5 == 0) {
 fire(""It is divisible by 5.\n"");
 }
 alt {
 fire(""It is not divisible by 5.\n"");
 }

 theo (number % 10 == 0) {
 fire(""It is divisible by 10.\n"");
 }
 alt{
 fire(""It is not divisible by 10.\n"");
 }

 theo(number % 15 == 0) {
 fire(""It is divisible by 15.\n"");
 } 
 alt{
 fire(""It is not divisible by 15.\n"");
 }
}
offboard",
"onboard
captain(){
 pint dayNumber = load(""Enter a number representing the day of the week (1-7): "");

 theo(dayNumber == 1){
 fire(""The day is Sunday."");
 }
 altheo(dayNumber == 2){
 fire(""The day is Monday."");
 }
 altheo(dayNumber == 3){
 fire(""The day is Tuesday."");
 }
 altheo(dayNumber == 4){
 fire(""The day is Wednesday."");
 }
 altheo(dayNumber == 5){
 fire(""The day is Thursday."");
 }
 altheo(dayNumber == 6){
 fire(""The day is Friday."");
 }
 altheo(dayNumber == 7){
 fire(""The day is Saturday."");
 }
 alt{
 fire(""Invalid Input"");
 }
 }
offboard",
"onboard
captain(){
 pint month = load(""Enter a Month in Numerical(1-12):"");
 
 theo (month >= 3 and month <= 5){
 fire(""Spring season."");
 } 
 altheo (month >= 6 and month <= 8){
 fire(""Summer season."");
 }
 altheo (month >= 9 and month <= 11){
 fire(""Autumn season."");
 }
 alt {
 fire(""Winter season."");
 }
}
offboard",
"onboard
captain(){
 pint age = load(""Enter your Age:"");
 theo (age >= 18) {
 fire(""Eligible to vote."");
 }
 alt {
 fire(""Not eligible to vote."");
 }
}
offboard",
"onboard
captain() {
 fleet ave = load(""Input grade from 0 to 100: "");
 theo (ave <= 100.0) {
 theo (ave <= 89.99) {
 theo (ave <= 79.99) {
 theo (ave <= 69.99) {
 theo (ave <= 59.99) {
 theo (ave <= 0.0) {
 fire(""Invalid Input."");
 }
 alt {
 fire(""F"");
 }
 }
 alt {
 fire(""D"");
 }
 }
 alt {
 fire(""C"");
 }
 }
 alt {
 fire(""B"");
 }
 }
 alt {
 fire(""A"");
 }
 }
 alt {
 fire(""Invalid Input"");
 }
}
offboard",
"onboard
captain(){
fire(""Let's classify a quadrilateral!"");
pint parallel = load(""How many parallel pairs? "");
pint right = 0;
pint congruent = 0;
theo(parallel == 0) {
fire(""This quadrilateral is a Trapezium."");
}
altheo(parallel == 1) {
fire(""This quadrilateral is a Trapezoid."");
}
altheo(parallel == 2) {
right = load(""Does this parallelogram have right angles? (1 = Yes or 0 = No): "");
theo(right == 0) {
congruent = load(""Do all sides have same length? (1 = Yes or 0 = No): "");
theo(congruent == 0) {
fire(""This quadrilateral is a Parallelogram."");
}
altheo(congruent == 1) {
fire(""This quadrilateral is a Rhombus."");
}
alt {
fire(""Invalid input!"");
}
}
altheo(right == 1) {
congruent = load(""Do all sides have same length? (1 = Yes or 0 = No): "");
theo(congruent == 0) {
fire(""This quadrilateral is a Square."");
}
altheo(congruent == 1) {
fire(""This quadrilateral is a Rectangle."");
}
alt {
fire(""Invalid input!"");
}
}
}
alt {
fire(""Invalid input!"");
}
}
offboard",
"onboard
captain(){
pint angle = load(""Input angle measurement (1-359) in degrees: "");
theo(angle < 360) {
theo(angle > 180) {
fire(angle);
fire("" degrees is a Reflex Angle."");
}
altheo(angle == 180) {
fire(angle);
fire("" degrees is a Straight Angle."");
}
altheo(angle < 180) {
theo(angle > 90) {
fire(angle);
fire("" degrees is an Obtuse Angle."");
}
altheo(angle == 90) {
fire(angle);
fire("" degrees is a Right Angle."");
}
altheo(angle > 0) {
fire(angle);
fire("" degree/s is an Acute Angle."");
}
alt {
fire(""Invalid Input!"");
}
}
alt {
fire(""Invalid Input!"");
}
}
alt {
fire(""Invalid Input!"");
}
}
offboard",
"onboard
captain(){
pint numerator = load(""Input numerator of the fraction (provide the absolute value): "");
pint denominator = 0;
denominator = load(""Input denominator of the fraction (must be an integer more than 0): "");
theo(numerator > denominator) {
fire(""It is an improper fraction."");
}
altheo (numerator == denominator) {
fire(""It is a whole fraction."");
}
alt {
fire(""It is a proper fraction."");
}
}
offboard",
"onboard
captain() {
pint score = load(""Enter the exam score: "");
theo(score >= 60) {
fire(""Congratulations! You passed the exam."");
}
alt {
fire(""Sorry, you failed the exam. Better luck next time."");
}
}
offboard",
"onboard 
captain() {
 fire(""Choose your sauce!"");
 fire(""\n1. Ketchup"");
 fire(""\n2. Mayo"");
 fire(""\n3. Mustard"");
 fire(""\n4. BBQ"");
 fire(""\n5. Hot Sauce"");

 pint choice = load(""Enter from choices 1-5: "");

 helm(choice) {
 chest 1: fire(""\n\nYou chose Ketchup!""); 
 chest 2: fire(""\n\nYou chose Mayo!"");
 chest 3: fire(""\n\nYou chose Mustard!""); 
 chest 4: fire(""\n\nYou chose BBQ!""); 
 chest 5: fire(""\n\nYou chose Hot Sauce!"");
 dagger: fire(""\n\nInvalid Input! You didn't choose correctly!"");
 }
} 
offboard",
"onboard 
captain() {
 pint age = load(""Enter your age: "");

 theo(age >= 18) {
 fire(""The user is on LEGAL age!"");
 } 
 alt {
 fire(""The user is UNDERAGE!"");
 }
} 
offboard",
"onboard 
captain() {
 pint age = load(""Enter your Age: "");
 
 # Determine recommended hours of sleep based on age
 
 pint rec_sleep = 0;
 
 theo(age <= 1) {
 rec_sleep = 14;
 }
 altheo(age <= 2) {
 rec_sleep = 13;
 }
 altheo(age <= 5) {
 rec_sleep = 12;
 } 
 altheo(age <= 13) {
 rec_sleep = 10;
 }
 altheo(age <= 17) {
 rec_sleep = 9;
 }
 altheo(age <= 64) {
 rec_sleep = 8;
 }
 alt {
 rec_sleep = 7;
 }
 fire(""The recommended hours of sleep for your age "");
 fire(age);
 fire("" is : "");
 fire(rec_sleep);
 fire("" hrs.""); 
} 
offboard",
"onboard 
captain() {
 pint hour = load(""Enter the current hour (0-23): "");

 # Determine if the store is open or closed
 
 theo(hour >= 9 and hour < 21) {
 fire(""The store is OPEN!"");
 }
 alt {
 fire(""The store is NOT open!"");
 }
} 
offboard",
"onboard
captain(){
 pint limit = load(""Input Limit: "");
 pint a = 1, b = 2, sum = 0;
 
 whale(b <= limit){
 theo(b % 2 == 0){
 sum = sum + b;
 }
 pint next = a + b;
 a = b;
 b = next;
 }
 fire(sum);
}
offboard",
"onboard
captain(){
 doffy color = load(""Input Color: "");
 
 theo(color == ""red"" oro color == ""orange"" oro color == ""green""){
 fire(""The Color you picked is a part of a traffic light"");
 }
 alt{
 fire(""The Color you picked is not a part of a traffic light"");
 }
}
offboard",
"onboard
captain(){
 pint num = load(""Enter a positive integer: "");
 pint sum = 0;
 
 theo(num <= 0) {
 fire(""Error: Please enter a positive integer"");
 }
 four(pint i = 1; i <= num; i++){
 theo(i > 0) {
 sum = sum + i;
 }
 }
 fire(sum);
}
offboard",
"onboard
captain(){
 fleet originalPrice = load(""Enter the original price: "");
 fleet discount = load(""Enter the discount percentage: "");
 
 theo(discount >= 0 and discount <= 100) {
 fleet finalPrice = originalPrice - (originalPrice * (discount / 100.0));
 fire(""Final price after applying a discount: "");
 fire(finalPrice);
 } 
 alt{
 fire(""Invalid discount percentage entered. Please enter a value between 0 and 100."");
 }
}
offboard",
"onboard
captain(){
 pint score = load(""Enter the score: "");

 theo(score >= 90){
 fire(""A"");
 } 
 altheo(score >= 80){
 fire(""B"");
 } 
 altheo(score >= 70){
 fire(""C"");
 }
 altheo(score >= 60){
 fire(""D"");
 }
 alt{
 fire(""F"");
 }
}
offboard",
"onboard
captain(){
 pint cart = [1,5,2,6,1,7,4,2];
 pint total = 0;
four(pint i = 0; i < len(cart); i++){
 total = total + cart[i];
}
fire(total);
}
offboard",
"pint price = [4,2,6,2];
pint quant = [5,5,5,5];
pint total = 0
four(pint i = 0; i < len(price); i++){
total = total + price[i] * quantity[i];
}

fire(total);",
"onboard
captain(){
 pint money = load(""enter money: "");
 pint twenty=0, ten=0, five=0, one=0;
 whale(money != 0){
 theo(money>=20){
 twenty = twenty + money // 20;
 money = money % 20;
 } 
 altheo(money>=10){
 ten = ten + money // 10;
 money = money % 10;
 } altheo(money>=5){
 five= five + money // 5;
 money = money % 5;
 } alt{
 one = one + money // 1;
 money = money % 1;
 }
 }
 fire(twenty);
 fire(""\n"");
 fire(ten);
 fire(""\n"");
 fire(five);
 fire(""\n"");
 fire(one);

}
offboard",
"pint event = [1,0,0,1,1,1,1,0,1,0,0,1,0,1,1], coming = 0, not_coming = 0;
four(pint i = 0; i < len(event); i++){
 theo(event[i] == 0){
 not_coming++;
}
alt{
 coming++;
}

fire(""coming: "");
fire(coming);
fire(""\nnotcoming: "");
fire(not_coming)
}",
"pint attempt = 3;
doffy password = ""password"";
bull in = usopp;

pint n = 0
whale(n < attempt){
doffy passAttempt = load(""Password: "");
theo(passAttempt == password){
fire(""you're in"");
in = real;
leak;
} alt{
n++;
}
}

theo(in == usopp){
fire(""timeout"");
}",
"onboard
captain(){
 
 pint number = load(""Enter a number: "");

 fire(""Addition table for "");
 fire(number);
 fire("":"");
 fire(""\n"");
 
 four (pint i = 1; i <= 10; i = i + 1) {
 pint result = number + i;
 fire(number);
 fire(""+"");
 fire(i);
 fire(""="");
 fire(result);
 fire(""\n"");
 }
}
offboard",
"onboard

captain() {
pint target = 7;
pint guess = 0;

 whale (real) {
 guess = load(""Guess the number: "");

 theo(guess == target) {
 fire(""Congratulations! You guessed the correct number: "");
 fire(target);
 leak; 
 } 

 altheo(guess < target) {
 fire(""Your guess is too low. Try again."");
 } 

 alt{
 fire(""Your guess is too high. Try again."");
 }
 }
}
offboard",
"onboard
captain(){
 pint num = load(""Enter number: "");
 pint first = 1;
 pint second = 1;
 pint next = 0;
 pint i = 1;
 
 whale(i<=num){
 fire(first);
 fire(""\n"");
 
 next = first + second;
 first = second;
 second = next;
 
 i++;
 }
}
offboard",
"onboard
captain(){
 pint row = 10;
 
 four(pint i = 1; i <= row; i++){
 four(pint j = 1; j <= i; j++){
 fire(j);
 }
 fire(""\n"");
 }
}
offboard",
"onboard

captain() {
pint silver = load(""Enter the number of terms in the series: "");
pint base = load(""Enter the base of the exponential series: "");
pint sum = 0;

 pint term = 1; 
 four(pint i = 0; i < silver; i++) {
 sum = sum + term; 
 term = term * base; 
 }

 fire(""The sum of the first "");
 fire(silver);
 fire("" terms of the exponential series with base "");
 fire(base);
 fire("" is: "");
 fire(sum);
}
offboard",
"onboard
captain(){
 pint factorial = 1;
 pint number = load(""Enter a positive integer:"");
 
 theo(number < 0) {
 fire(""Error: Factorial is not defined for negative number."");
 }
 alt {
 four(pint i = 1; i <= number; i = i + 1){
 factorial = factorial * i;
 }
 }
 
 fire(""Factorial of "");
 fire(number);
 fire("" is "");
 fire(factorial);
}
offboard",
"onboard
captain(){
 pint row = load(""Enter Number of Steps:"");
 
 four (pint i = 1; i <= row; i++) {
 four (pint j = 1; j <= row; j++) {
 theo (j <= i) {
 fire(""*"");
 }
 alt {
 fire("" "");
 }
 }
 fire(""\n"");
 }
}
offboard",
"onboard
captain(){
 pint product = 1, digit = 0;
 
 pint number = load(""Enter a Number:"");
 
 theo (number == 0) {
 product = 0; 
 } 
 alt {
 whale (number != 0) {
 digit = number % 10; 
 product = product * digit; 
 number = number / 10; 
 }
 }
 fire(""Product of the Digits: "");
 fire(product);
}
offboard",
"onboard
 captain(){
 pint i = 0;
 pint rows = load(""Enter the number of rows for the inverted triangle: "");
 
 four (pint i = rows; i >= 1; i--) {
 four (pint j = 1; j <= i; j++) {
 fire(j);
 }
 fire(""\n"");
 }
 }
offboard",
"onboard
captain() {
 pint num = 1; 
 pint n = load(""Enter the number of rows: "");

 four (pint i = 1; i <= n; i++) {
 four (pint j = 1; j <= i; j++) {
 fire(num);
 theo (j < i){
 fire("" "");
 }
 num++; 
 }
 fire(""\n"");
 }
}
offboard",
"onboard
captain() {
pint n = 0;
n = load(""Input number: "");
four(pint i=1; i<=n; i++) {
fire(i);
}
}
offboard",
"onboard
captain() {
fleet loan = load(""Input loan amount: "");
pint length = load(""Input number of months: "");
fleet rate = load(""Input monthly interest rate (in percent): "");
fleet cost = loan, interest = 0;
interest = loan*rate*0.01;
fleet interestinmo = 0;
four(pint i=1; i<=length; i++) {
interestinmo = interest + interestinmo;
}
four(pint i=1; i<=length; i++) {
cost=cost+interestinmo;
}
fire(""In "");
fire(length);
fire("" months, the total cost of your loan will be Php "");
fire(cost);
}
offboard",
"onboard
captain() {
pint num_customers = load(""Enter the number of customers: "");
pint total_bill = 0;
four (pint i = 1; i <= num_customers; i++) {
fire(""Customer "");
fire(i);
pint cubm_used = load(""Enter cubic meter used: "");
pint bill = 0;

theo (cubm_used <= 10) {
bill = 100;
}
alt {
pint excess = cubm_used - 10;
bill = 100 + excess * 50;
}
total_bill = total_bill + bill;
fire(""Customer "");
fire(i);
fire(""Water Bill: "");
fire(bill);
fire(""php"");
}
fire(""Total Water Bill for "");
fire(num_customers);
fire(""Customers: "");
fire(total_bill);
fire(""php"");
}
offboard",
"onboard
captain() {
pint num_tracks = load(""Enter the number of tracks in the album: "");
pint total_streams = 0;

four (pint i = 1; i <= num_tracks; i++) {
pint track_streams = load(""Enter the number of streams for Track i"");
total_streams = total_streams + track_streams;
}

fire(""Total number of streams for the album: "");
fire(total_streams);
}
offboard",
"onboard
captain() {
pint num_violators = load(""Enter the number of violators: "");
pint total_fine = 0;

four (pint i = 1; i <= num_violators; i++) {
pint num_violations = load(""Enter the number of violations for Violator {i}: "");
pint fine_per_v = load(""Enter the fine per violation: "");

pint violator_fine = num_violations * fine_per_v;
total_fine = total_fine + violator_fine;

fire(""Fine for Violator "");
fire(i);
fire("": "");
fire(violator_fine);
}
fire(""Total fine for all violators: "");
fire(total_fine);
}
offboard",
"onboard
captain(){
 pint seconds = load(""Enter the number of seconds to count down from: "");
 
 whale(seconds >= 0) {
 fire(seconds);
 fire(""\n"");
 seconds = seconds - 1;
 }
 
 fire(""Times up!"");
}
offboard",
"onboard
captain(){
 pint n1 = load(""Enter n1: "");
 pint n2 = load(""Enter n2: "");
 
 pint a = n1;
 pint b = n2;
 
 whale(b != 0) {
 pint temp = b;
 b = a % b;
 a = temp;
 }
 
 fire(""GCD is "");
 fire(a);
 
 pint product = n1 * n2;
 pint result = product // a;
 
 fire(""\nThe result of multiplication and division is: "");
 fire(result);
}
offboard",
"onboard
captain(){
 pint n1 = load(""Enter the Base Number: "");
 pint n2 = load(""Enter the Exponent: "");
 
 pint power_result = 1;
 pint i = 0;
 whale (i < n2) {
 power_result = power_result * n1;
 i = i + 1;
 }
 
 pint result = power_result - n1;
 
 fire(""The result of "");
 fire(n1);
 fire("" raised to the power of "");
 fire(n2);
 fire("" then subtracting to "");
 fire(n1);
 fire("" is: "");
 fire(result);
 
}
offboard",
"onboard 
captain() {
 pint number = 0, fact_norm = 1, fact_rev = 1;
 number = load(""Enter a number to calculate its factorial: "");

 # Calculate factorial in the normal way using a loop
 fire(""Normal Way:\n"");
 four(pint i = 1; i <= number; i++) {
 fire(i);
 fact_norm = fact_norm * i;
 theo(i == number) {
 fire("""");
 } 
 alt {
 fire(""*"");
 }
 }
 
 fire(""\nReverse Way:\n"");
 # Calculate factorial in reverse order using a loop
 four(pint i = number; i >= 1; i--) {
 fire(i);
 fact_rev = fact_rev * i;
 theo(i==1) {
 fire("""");
 } 
 alt {
 fire(""*"");
 }
 }
 
 fire(""\n\nFactorial of ""); 
 fire(number); 
 fire("" calculated the normal way is ""); 
 fire(fact_norm);
 fire(""\nFactorial of ""); 
 fire(number); 
 fire("" calculated in reverse order is ""); 
 fire(fact_rev);
} 
offboard",
"onboard 
captain() {
 pint rows = load(""Enter the number of rows: "");
 pint cols = load(""Enter the number of columns: "");
 
 four(pint i = 1; i <= rows; i++) {

 four(pint j = 1; j <= rows - i; j++) {
 fire("" "");
 }
 
 four(pint j = 1; j <= cols; j++) {
 fire(""""*"");
 }
 fire(""\n"");
 }
} 
offboard",
"onboard
captain(){
 pint size = load(""Enter the size of the pattern: "");

 four(pint i = 1; i <= size; i++) {
 four(pint j = 1; j <= i; j++) {
 fire(""$"");
 }
 fire(""\n"");
 }
}
offboard",
"onboard
captain(){
 pint limit = load(""Enter the limit: "");
 pint choice = load(""Calculate the sum of (1) Even numbers or (2) Odd numbers: "");
 pint sum = 0;

 theo(choice == 1){
 four (pint i = 0; i <= limit; i++) {
 theo(i % 2 == 0) {
 sum = sum + i;
 }
 }
 fire(""The sum of even numbers up to the given limit is: "");
 fire(sum);
 }
 altheo(choice == 2) {
 four (pint i = 0; i <= limit; i++) {
 theo(i % 2 != 0) {
 sum = sum + i;
 }
 }
 fire(""The sum of odd numbers up to the given limit is: "");
 fire(sum);
 }
 alt{
 fire(""Invalid choice!"");
 }
}
offboard",
"onboard
captain(){
 pint arr = [1, 2, 3, 2, 4, 2, 5, 2, 6, 2]; 
 pint size = len(arr);
 pint maxFreq = 0, mostFreqNum = 0;

 four(pint i = 0; i < size; i++) {
 pint currentNum = arr[i];
 pint frequency = 0;
 four(pint j = 0; j < size; j++) {
 theo(arr[j] == currentNum){
 frequency++;
 } 
 }
 theo(frequency > maxFreq) {
 maxFreq = frequency;
 mostFreqNum = currentNum;
 }
 }
 fire(""The most frequent number is: "");
 fire(mostFreqNum); 
 fire("" with a frequency of "");
 fire(maxFreq);
}
offboard",
"onboard
captain(){
 pint binaryNumber = load(""Enter a binary number: "");
 pint decimalNumber = 0, base = 1;

 whale (binaryNumber > 0) {
 pint lastDigit = binaryNumber % 10;
 binaryNumber = binaryNumber / 10;
 decimalNumber = decimalNumber + (lastDigit * base);
 base = base * 2;
 }

 fire(""Decimal equivalent: "");
 fire(decimalNumber);
}
offboard",
"onboard
captain(){
 pint start = load(""Enter the start of the range: "");
 pint end = load(""Enter the end of the range: "");
 pint product = 1; 
 
 theo(start > end) {
 fire(""Invalid range. Start should be less than or equal to end."");
 }
 theo(start % 2 != 0) {
 start++;
 }
 four(pint i = start; i <= end; i = i + 2) {
 product = product * i;
 }
 fire(""The product of all even number in the given range is: "");
 fire(product);
}
offboard",
"onboard
#total sum of two arrays
pint arr1 = [1,5,2,3,4];
pint arr2 = [6,2,3,6,2];
pint total = 0;

captain() {

 four(pint i = 0; i < len(arr1); i++){
 total = total + arr1[i];
 }
 four(pint j = 0; j < len(arr2); j++){
 total = total + arr2[j];
 }
 fire(total);
}
offboard",
"onboard
#total sum of two arrays
pint arr1 = [1,5,2,3,4];
pint arr2 = [6,2,3,6,2];
pint total = 1;

captain() {

 four(pint i = 0; i < len(arr1); i++){
 total = total * arr1[i];
 }
 four(pint j = 0; j < len(arr2); j++){
 total = total * arr2[j];
 }
 fire(total);
}
offboard",
"onboard

# creates new array with the sum of the indexes of 2 arrays
pint arr1 = [1,5,2,3,4];
pint arr2 = [6,2,3,6,2];

captain() {
 pint new_arr = [0];
 four(pint a = 0; a < len(arr1); a++){
 theo(a == 0){
 new_arr[a] = arr1[a] + arr2[a];
 }
 alt{
 new_arr = new_arr + [arr1[a] + arr2[a]];
 }
 }
 fire(new_arr);
}
offboard",
"onboard

# creates new array with the sum of the indexes of 2 arrays
pint arr1 = [1,5,2,3,4];
pint arr2 = [6,2,3,6,2];

captain() {
 pint new_arr = [0];
 four(pint a = 0; a < len(arr1); a++){
 theo(a == 0){
 new_arr[a] = arr1[a] * arr2[a];
 }
 alt{
 new_arr = new_arr + [arr1[a] * arr2[a]];
 }
 }
 fire(new_arr);
}
offboard",
"onboard
captain(){
 pint arr = [5,2,2];
 pint a = 0;
 whale(a < len(arr)){
 four(pint i = 0; i < arr[a]; i++){
 four(pint j = 0; j < arr[a]; j++){
 fire(""*"");
 }
 fire(""\n"");
 }
 fire(""\n"");
 a++;
 }
}
offboard",
"onboard
pint sumEvenNumbers(pint arr) {
 pint length = len(arr);
 pint sum = 0;

 four(pint i = 0; i < length; i++) {
 theo(arr[i] % 2 == 0) {
 sum = sum + arr[i];
 }
 }

 home(sum);
}

captain() {
 pint arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
 pint evenSum = sumEvenNumbers(arr);
 fire(""The sum of all even numbers in the array is: "");
 fire(evenSum);
}
offboard",
"onboard
pint countOddNumbers(pint arr) {
 pint length = len(arr);
 pint count = 0;

 four(pint i = 0; i < length; i++) {
 theo(arr[i] % 2 != 0) {
 count = count + 1;
 }
 }

 home(count);
}

captain() {
 pint arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
 pint oddFrequency = countOddNumbers(arr);
 fire(""The frequency of odd numbers in the array is: "");
 fire(oddFrequency);
}
offboard",
"onboard

captain() {
pint array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]; 
pint length = 10; 
pint evenCount = 0;

 four(pint i = 0; i < length; i++) {
 theo (array[i] % 2 == 0) {
 evenCount = evenCount + 1;
 }
 }

 fire(""The frequency of even numbers in the array is: "");
 fire(evenCount);
}
offboard",
"onboard
doffy colors = [""red"", ""blue"", ""green"", ""blue"", ""yellow"", ""red"", ""blue""]; 
pint length = 7; 

captain() {
 
 doffy uniqueColors = [""red"", ""blue"", ""green"", ""yellow""];
 pint uniqueLength = 4; 

 pint frequency = [0, 0, 0, 0];
 
 four (pint i = 0; i < length; i++) {
 
 four (pint j = 0; j < uniqueLength; j++) {
 theo (colors[i] == uniqueColors[j]) {
 frequency[j] = frequency[j] + 1;
 }
 }
 }
 
 four (pint k = 0; k < uniqueLength; k++) {
 fire(""The color "");
 fire(uniqueColors[k]);
 fire("" appears "");
 fire(frequency[k]);
 fire("" times.\n"");
 }
}
offboard",
"onboard
pint numbers = [1, 4, 7, 3, 10]; 
pint length = 5; 

captain() {
 
 four (pint i = 0; i < length; i++) {
 four (pint j = 0; j < numbers[i]; j++) {
 fire(""*"");
 }
 fire(""\n"");
 }
}
offboard",
"onboard

pint max = 0, min = 0;
void findMaxMin(pint arr, pint size) {
 max = arr[0];
 min = arr[0];
 four (pint i = 1; i < size; i++) {
 theo (arr[i] > max) {
 max = arr[i];
 }
 theo (arr[i] < min) {
 min = arr[i];
 }
 }
}

captain() {
 pint arr = [3, 7, 2, 8, 5, 10, 1];
 pint size = len(arr);
 findMaxMin(arr, size);

 fire(""Maximum element in the array: "");
 fire(max);
 fire(""\n"");
 fire(""Maximum element in the array: "");
 fire(min);
 fire(""\n"");
}
offboard",
"onboard
void reverseArray(pint arr, pint n) {
 pint start = 0, end = n - 1;
 whale (start < end) {
 pint temp = arr[start];
 arr[start] = arr[end];
 arr[end] = temp;
 
 start++;
 end--;
 }
}

void printArray(pint arr, pint n) {
 four (pint i = 0; i < n; i++) {
 fire(arr[i]);
 }
 fire(""\n"");
}

captain() {
 pint arr = [1, 2, 3, 4, 5];
 pint n = len(arr);
 
 fire(""Original array: \n"");
 printArray(arr, n);
 
 reverseArray(arr, n);
 
 fire(""Reversed array: \n"");
 printArray(arr, n);
}
offboard",
"onboard
captain() {
 pint arr = [1, 2, 3, 4, 5];
 pint n = len(arr);
 pint sum = 0; 

 four (pint i = 0; i < n; i++) {
 sum = sum + arr[i]; 
 }

 pint average = sum / n; 

 fire(""The average of the array is: "");
 fire(average);
}
offboard",
"onboard
void Duplicates(pint arr, pint size) {
 fire(""Duplicate elements in the array: "");
 four (pint i = 0; i < size - 1; i++) {
 four (pint j = i + 1; j < size; j++) {
 theo (arr[i] == arr[j]) {
 fire(arr[i]);
 fire("" "");
 }
 }
 }
 fire(""\n"");
}

captain() {
 pint arr = [1, 2, 3, 4, 5, 2, 3, 6, 7, 8, 4];
 pint size = len(arr);

 Duplicates(arr, size);
}
offboard",
"onboard
void Intersection(pint arr1, pint size1, pint arr2, pint size2){
 four (pint i = 0; i < size1; i++) {
 four (pint j = 0; j < size2; j++) {
 theo (arr1[i] == arr2[j]){
 fire(arr1[i]);
 fire("" "");
 }
 }
 }
 fire(""\n"");
 }

captain() {
 pint arr1 = [1, 2, 3, 4, 5];
 pint arr2 = [3, 4, 5, 6, 7];
 pint size1 = 5, size2 = 5;
 fire(""Intersection of arrays: "");
 Intersection(arr1, size1, arr2, size2);
}
offboard",
"onboard
captain(){
 #makes a list of triangles according to total of array
 pint arr = [1,2,3];
 pint total = 0;
 four(pint i = 0; i < len(arr); i++){
 total = total + arr[i];
 }
 
 four(pint j = 0; j < total; j++){
 four(pint k = 0; k <= j; k++){
 fire(""*"");
 }
 fire(""\n"");
 }
 
}
offboard",
"onboard
captain() {
 doffy books = [""X"", ""X"", ""X""];
 doffy book1 = ""Psych101"";
 doffy book2 = ""The Boy Who Wears Pajama"";
 doffy book3 = ""Lord of the Flies"";

 books[0] = book1;
 books[1] = book2;
 books[2] = book3;

 fire(books);
}
offboard",
"onboard
captain(){
 #makes a list of triangles according to total of array
 pint arr = [3,5,4];
 pint a = 0;
 whale(a < len(arr)){
 four(pint i = 0; i < arr[a]; i++){
 four(pint j = 0; j <= i; j++){
 fire(""*"");
 }
 fire(""\n"");
 }
 fire(""\n"");
 a++;
 }
 
}
offboard",
"onboard
captain(){
 doffy vowels = [""a"", ""a"", ""e"", ""i"", ""o"", ""u"", ""e"", ""e"", ""i"", ""i"", ""i"", ""i""];
 pint a = 0, e = 0, i = 0, o = 0, u = 0;
 
 four(pint j = 0; j < len(vowels); j++){
 doffy vowel = vowels[j];
 helm(vowel){
 chest ""a"": a++;
 chest ""e"": e++;
 chest ""i"": i++;
 chest ""o"": o++;
 dagger: u++;
 }
 }
 fire(""a: "");
 fire(""*"" * a);
 fire(""\ne: "");
 fire(""*"" * e);
 fire(""\ni: "");
 fire(""*"" * i);
 fire(""\no: "");
 fire(""*"" * o);
 fire(""\nu: "");
 fire(""*"" * u);
 
 
}
offboard",
"onboard
captain() {
 pint arr = [5,2,2];
 pint a = 0;
 whale (a < len (arr)) {
 four (pint i = 0; i < arr[a]; i++) {
 four (pint j = 0; j < arr[a]; j++) {
 fire(""*"");
 fire (""\n"");
 }
 fire(""\n"");
 }
 }
}
offboard",
"onboard
pint computeProduct(pint arr, pint n) {
 fleet product = 1; 
 four (pint i = 0; i < n; i++) {
 product = product * arr[i];
 }
 home(product);
}

captain() {
 # Define the array
 pint arr = [3, 7, 2, 4];
 pint n = len(arr);

 # Call the function to compute the product of all elements
 pint product = computeProduct(arr, n);
 fire(""Product of all elements in the array: "");
 fire(product);
}
offboard",
"onboard
void valueChanger(pint arr, pint idx, pint val) {
 fire(""The initial array is: "");
 fire(arr);
 
 four(pint i=0; i<len(arr); i++) {
 theo(i==idx) {
 arr[i] = val;
 leak;
 }
 }
 fire(""The newest value of the array is: "");
 fire(arr);
}
 

captain() {
 # Define the array
 pint arr = [3, 7, 2, 4];

 valueChanger(arr, 0, 5);
}
offboard",
"onboard
void modTheVal(pint arr, pint idx, pint val, pint ops {
fire(""The initial array is: "");
fire(arr);

four(pint i=0; i<len(arr); i++) {
theo(i == idx and op == 1) {
arr[i] = arr[i] + val;
leak;
}
altheo(i ==i dx and op == 2) {
arr[i] = arr[i] - val;
leak;
}
altheo(i == idx and op == 3) {
arr[i] = arr[i] * val;
leak;
}
}
fire(""The newest value of the array is: "");
fire(arr);
}


captain() {
# Define the array
pint arr = [3, 7, 2, 4];
fire(""Choose operation you want to apply to the element:"");
fire(""\n1. Addition\n2. Subtraction \n3. Multiplication"");
pint op = load(""\nEnter Opration [1-3]: "");
modTheVal(arr, 1, 2, op);
}
offboard",
"onboard
void change2vals(pint arr, pint idx1, pint val1, pint idx2, pint val2) {
 fire(""The initial array is: "");
 fire(arr);
 
 four(pint i=0; i<len(arr); i++) {
 theo(i == idx1) {
 arr[i] = val1;
 } 
 altheo(i==idx2) {
 arr[i] = val2;
 }
 }
 fire(""\nThe newest value of the array is: "");
 fire(arr);
}
 

captain() {
 # Define the array
 pint arr = [3, 7, 2, 4];
 change2vals(arr, 1, 3, 3, 6);
 # New Value of the Array will be [3, 3, 2, 6]
}
offboard",
"onboard
void increaseSalary(pint arr, pint increase) {

 four(pint i=0; i<len(arr); i++) {
 theo(arr[i] < 5000) {
 arr[i] = arr[i] + increase;
 } 
 }
 fire(""Increase in Salaries has been Applied"");
}
 
captain() {
 # Define the array
 pint salaries = [5000, 10550, 25200, 15500, 3500, 2500, 4500];
 increaseSalary(salaries, 500);
 # New Value of the Array will be [5000, 10550, 25200, 15500, 4000, 3000, 5000]
 fire(""\n\n"");
 fire(salaries);
}
offboard",
"onboard
captain(){
 pint pArr = [2, 4, 6, 8, 10]; 
 pint aSize = len(arr);
 
 pint valToDel = load(""Enter the value to delete: "");

 bull found = usopp;
 four(pint i = 0; i < aSize; i++) {
 theo(pArr[i] == valToDel){
 found = real;
 four(pint j = i; j < aSize - 1; j++) {
 pArr[j] = pAarr[j + 1];
 }
 aSize--;
 leak;
 }
 }
 theo(found){
 fire(""Array after deleting the inputted value: "");
 fire(valToDel);
 four(int i = 0; i < size; i++) {
 fire(arr[i]);
 fire("" "");
 }
 fire(""\n"");
 }
 alt{
 fire(""Value not found in the array."");
 }
}
offboard",
"onboard
pint findSecLargest(pint arr, pint size) {
 pint firstMax = 0, secondMax = 0;

 four(pint i = 0; i < size; i++) {
 theo(arr[i] > firstMax) {
 secondMax = firstMax;
 firstMax = arr[i];
 } 
 altheo(arr[i] > secondMax and arr[i] != firstMax) {
 secondMax = arr[i];
 }
 }
 home(secondMax);
}
captain(){
 pint arr = [10, 20, 5, 25, 30, 15];
 pint size = len(arr);
 
 fire(""The second largest element in the array is: "");
 fire(findSecLargest(arr, size)); 
}
offboard",
"onboard
captain(){
 pint sArray = [1, 2, 3, 4, 5];
 pint dArray = [0];

 pint sSize = len(sArray);

 four(pint i = 0; i < sSize; i++) {
 theo(i == 0){
 dArray[i] = sArray[i];
 }
 alt{
 dArray = dArray + [sArray[i]];
 }
 }
 fire(""Destination Array: "");
 four(pint i = 0; i < sSize; i++) {
 fire(dArray[i]); 
 fire("" "");
 }
 fire(""\n"");
}
offboard",
"onboard
captain(){
 pint arr = [10, 5, 8, 3, 6];
 pint size = len(arr);

 pint lowest = arr[0];
 four(pint i = 1; i < size; i++) {
 theo(arr[i] < lowest) {
 lowest = arr[i];
 }
 }
 fire(""The lowest element in the array is: "");
 fire(lowest);
}
offboard",
"onboard
fleet arrayAve(fleet arr, pint size) {
 fleet sum = 0;
 four(pint i = 0; i < size; i++) {
 sum = sum + arr[i];
 }
 home (sum / size);
}
captain(){
 fleet arr = [1.5, 2.5, 3.5, 4.5, 5.5];
 pint size = len(arr);
 
 fire(""Average of array elements: "");
 fire(arrayAve(arr, size));
}
offboard",
"onboard
fleet required_grade(fleet target, pint total_quiz,fleet current){
 home((target * total_quiz - current * (total_quiz - 1)) / total_quiz);
}

captain() {
 fire(required_grade(99.0, 5, 94.0));
}
offboard",
"onboard
fleet mm_scale_ratio(fleet m_real, fleet mm_paper, fleet m_size){
 home(m_real/m_real*mm_paper);
}
captain() {
 fire(mm_scale_ratio(2.0, 5.0, 3.0));
}
offboard",
"onboard
loyal pint minimum = 13;
fleet jeep_fare(pint quant, bull is_discounted){
 theo(is_discounted){
 home(minimum * 0.80 * quant);
} alt{
 home(minimum * quant);
}
}
captain(){
 fire(jeep_fare(3, real));
}
offboard",
"onboard 
bull is_open(bull is_holiday, bull is_weekend){
 home(nay(is_holiday oro is_weekend));
}
captain() {
 fire(is_open(real , real));
}
offboard",
"onboard
pint minsToSec(pint m){
 home(minute * 60)
}
captain(){
 pint minutes = load(""enter minutes: "");
 fire(minutes);
 fire("" minutes is "");
 fire(minsToSec(minutes))
}
offboard",
"onboard

pint sumNatNum(pint n) {
 pint var = n+1;
 home(n * var / 2);
}

captain() {
 pint n = load(""Enter a positive integer: "");
 pint sum = sumNatNum(n);
 fire(""The sum of first "");
 fire(n);
 fire("" natural number is: "");
 fire(sum);
}
offboard",
"onboard
pint countDigits(pint number) {
 pint count = 0;

 whale (number >= 1) {
 count = count + 1;
 number = number / 10;
 }

 home(count);
}

captain() {
 pint number = load(""Enter a number: "");
 pint digitCount = countDigits(number);
 fire(""The number of digits in "");
 fire(number);
 fire("" is: "");
 fire(digitCount);
}
offboard",
"onboard
pint gcd(pint a, pint b) {
 whale (b != 0) {
 pint temp = b;
 b = a % b;
 a = temp;
 }
 home(a);
}

captain() {
 pint num1 = load(""Enter the first number: "");
 pint num2 = load(""Enter the second number: "");
 
 pint result = gcd(num1, num2);
 
 fire(""The GCD of "");
 fire(num1);
 fire("" and "");
 fire(num2);
 fire("" is: "");
 fire(result);
}
offboard",
"onboard
void perfNum(pint number){
 
 pint sum_of_divisors = 0;
 four (pint i = 1; i < number; i = i + 1) {
 theo (number % i == 0) {
 sum_of_divisors = sum_of_divisors + i;
 }
 }

 theo (sum_of_divisors == number) {
 fire(number);
 fire("" is a perfect number. "");
 } 
 
 alt {
 fire(number);
 fire("" is not a perfect number."");
 }
}

captain() {
 pint number = load(""Enter a number to check if it's a perfect number: "");
 
 perfNum(number);

 
}
offboard",
"onboard
void comparator(pint a, pint b){
 theo(a > b){
 fire(""The max value is: "");
 fire(a);
 }
 alt{
 fire(""The max value is: "");
 fire(b);
 }
}
captain(){
 pint a = load(""Enter first num: "");
 pint b = load(""Enter second num: "");
 
 comparator(a,b);
}
offboard",
"onboard
fleet sphereVolume(fleet radius) {
 home ((4.0 / 3.0) * 3.14 * (radius ** 3));
}

captain() {
 fleet radius = load(""Enter the radius of the sphere: "");
 fleet volume = 0;

 volume = sphereVolume(radius);

 fire(""Volume of the sphere "");
 fire(volume);
}
offboard",
"onboard
pint LunarAge(pint birthYear, pint currentYear, pint birthMonth, pint currentMonth) {
 pint age = currentYear - birthYear;

 theo (currentMonth < birthMonth) {
 age = age - 1;
 }

 home(age);
}

captain() {
 pint birthYear = load(""Enter your birth year: ""); 
 pint birthMonth = load(""Enter your birth month (1-12): "");
 pint currentYear = load(""Enter the current year: "");
 pint currentMonth = load(""Enter the current month: "");

 pint lunarAge = LunarAge(birthYear, currentYear, birthMonth, currentMonth);
 fire(""Your lunar age is "");
 fire(lunarAge);

}
offboard",
"onboard
doffy ElementSign(pint month, pint day) {
 theo (month == 3 and day >= 21 oro month == 4 and day <= 19) {
 fire(""Your Element sign is FIRE!"");
 }
 altheo(month == 4 and day >= 20 oro month == 5 and day <= 20) {
 fire(""Your Element sign is EARTH!""); 
 } 
 altheo (month == 5 and day >= 21 oro month == 6 and day <= 20) {
 fire(""Your Element sign is AIR!""); 
 } 
 altheo (month == 6 and day >= 21 oro month == 7 and day <= 22) {
 fire(""Your Element sign is WATER!""); 
 }
 alt {
 fire(""Your Element Sign will Reveal Soon."");
 }
}

captain() {
 pint birthMonth = load(""Enter your birth month (1-12): "");
 pint birthDay = load(""Enter your birth day (1-31): "");
 
 doffy element = ElementSign(birthMonth, birthDay);
 home(element);

}
offboard",
"onboard
doffy zodiacSign(pint month, pint day){
 theo(month == 1 and day >= 20 oro month == 2 and day <= 18){
 fire(""Aquarius"");
 }
 altheo(month == 2 and day >= 19 oro month == 3 and day <= 20){
 fire(""Pisces"");
 }
 altheo(month == 3 and day >= 21 oro month == 4 and day <= 19){
 fire(""Aries"");
 }
 altheo(month == 4 and day >= 20 oro month == 5 and day <= 20){
 fire(""Taurus"");
 }
 altheo(month == 5 and day >= 21 oro month == 6 and day <= 20){
 fire(""Gemini"");
 }
 altheo(month == 6 and day >= 21 oro month == 7 and day <= 22){
 fire(""Cancer"");
 }
 altheo(month == 7 and day >= 23 oro month == 8 and day <= 22){
 fire(""Leo"");
 }
 altheo(month == 8 and day >= 23 oro month == 9 and day <= 22){
 fire(""Virgo"");
 }
 altheo(month == 9 and day >= 23 oro month == 10 and day <= 22){
 fire(""Libra"");
 }
 altheo(month == 10 and day >= 23 oro month == 11 and day <= 21){
 fire(""Scorpio"");
 }
 altheo(month == 11 and day >= 22 oro month == 12 and day <= 21){
 fire(""Sagittarius"");
 }
 alt{
 fire(""Capricorn"");
 }
 }

captain(){
 pint m = load(""Enter Your Birth Month (1-12):"");
 pint d = load(""Enter Your Birth Day (1-31):"");
 
 doffy sign = zodiacSign(m, d);
 home(sign);
 }
offboard",
"onboard
doffy BirthMonth(pint month){
 theo(month == 1){
 fire(""Your Starter Pokemon is Bulbasaur"");
 }
 altheo(month == 2){
 fire(""Your Starter Pokemon is Charmander!"");
 }
 altheo(month == 3){
 fire(""Your Starter Pokemon is Squirtle!"");
 }
 altheo(month == 4){
 fire(""Your Starter Pokemon is Chikorita!"");
 }
 altheo(month == 5){
 fire(""Your Starter Pokemon is Cyndaquil!"");
 }
 altheo(month == 6){
 fire(""Your Starter Pokemon is Totodile!"");
 }
 altheo(month == 7){
 fire(""Your Starter Pokemon is Torchic!"");
 }
 altheo(month == 8){
 fire(""Your Starter Pokemon is Mudkip!"");
 }
 altheo(month == 9){
 fire(""Your Starter Pokemon is Turtwig!"");
 }
 altheo(month == 10){
 fire(""Your Starter Pokemon is Chimchar!"");
 }
 altheo(month == 11){
 fire(""Your Starter Pokemon is Piplup!"");
 }
 altheo(month == 12){
 fire(""Your Starter Pokemon is Snivy!"");
 }
}

captain(){
 pint M = load(""Enter Your Birth Month (1-12):"");
 
 doffy pokemon = BirthMonth(M);
 home(pokemon);
 }
offboard",
"onboard
fleet compute_gwa(pint num_subjects, fleet grades, fleet units) {
fleet total_units = 0, weighted_grades = 0, gwa = 0, gu = 0;
four (pint i = 0; i < num_subjects; i++) {
total_units = total_units + units[i];
gu = (grades[i] * units[i]);
weighted_grades = weighted_grades + gu;
}
gwa = weighted_grades / total_units;
home(gwa);
}

captain() {
pint num_subjects = 5;
fleet grades = [3.5, 4.0, 3.7, 3.2, 3.9];
fleet units = [3, 3, 2, 4, 3];

fleet gwa = compute_gwa(num_subjects, grades, units);
fire(""General Weighted Average (GWA): "");
fire(gwa);
}
offboard",
"onboard
doffy SickOrNot(fleet temp) {
 theo(temp >= 37) {
 home(""This person is sick"");
 }
 alt {
 home(""This person is not sick"");
 }
}

captain() {
 fleet temp = load(""Input temperature of person: "");
 fire(SickOrNot(temp));
}
offboard",
"onboard
doffy bloodPressure(pint sys, pint dia){
theo(sys >= 180 oro dia >= 120){
home(""High Blood Pressure"");
}
altheo (sys < 90 oro dia < 60){
home(""Low Blood Pressure"");
}
alt {
home(""Normal Blood Pressure"");
}
}

captain(){
fire(""Blood Pressure checker (sys/dia) mmHg"");
pint sys = load(""what is your systolic pressure: "");
pint dia = load(""what is your diastolic pressure: "");
fire(""\nYou have "");
fire(bloodPressure(sys, dia));
}
offboard",
"onboard
fleet PPM(fleet PPS) {
 home(PPS*60.0);
}

captain() {
 fleet PPS = load(""Input pulse per second: "");
 fire(PPM(PPS));
}
offboard",
"onboard
doffy check(fleet l, fleet w, fleet h) {
 theo(l <= 22.0 and w <= 14.0 and h <= 9.0) {
 home(""Can be carry-on"");
 }
 alt {
 home(""Can't be carry-on, must be checked"");
 }
}

captain() {
 fleet l = load(""Input length of baggage: "");
 fleet w = load(""Input width of baggage: "");
 fleet h = load(""Input height of baggage: "");
 fire(check(l, w, h));
}
offboard",
"onboard 
pint mode(pint arr, pint n) {
 pint mode = arr[0];
 pint maxCount = 0;
 
 four(pint i = 0; i < n; i++) {
 pint count = 0;
 four (pint j = 0; j < n; j++) {
 theo(arr[j] == arr[i]){
 count++;
 }
 }
 theo (count > maxCount) {
 maxCount = count;
 mode = arr[i];
 }
 }
 home(mode);
}

captain() {
 pint arr = [1,2,3,4,5];
 pint n = len(arr); 
 
 pint Mode = mode(arr, n);
 fire(""The mode of the list is: "");
 fire(mode);
} 
offboard",
"onboard
bull isCaptain(pint exp, pint lead) {
bull eligibility = usopp;
theo (exp >= 5 and lead >= 8) {
eligibility = real;
}
alt {
eligibility = usopp;
}
home(eligibility);
}

captain() {
# Define the attributes of each pirate
pint pir1_exp= 4;
pint pir1_lead = 7;

pint pir2_exp = 6;
pint pir2_lead = 9;

bull pir1_eligible = isCaptain(pir1_exp, pir1_lead);
bull pir2_eligible = isCaptain(pir2_exp, pir2_lead);

fire(""Pirate 1 Eligible for Captaincy: "");
fire(pir1_eligible);
fire(""\n"");

fire(""Pirate 2 Eligible for Captaincy: "");
fire(pir2_eligible);
fire(""\n"");
}
offboard",
"onboard
doffy moraleLevel(pint victories, pint treasures) {
theo (victories > 7 and treasures> 3) {
home(""High"");
}
altheo(victories > 3 and treasures > 1) {
home(""Medium"");
}
alt {
home(""Low"");
}
}

captain() {
# Define the attributes of each pirate
pint pir1_vic= 4;
pint pir1_treasures= 7;

pint pir2_vic = 10;
pint pir2_treasures= 10;

doffy pir1_morale = moraleLevel(pir1_vic, pir1_treasures);
doffy pir2_morale= moraleLevel(pir2_vic, pir2_treasures);

fire(""Pirate 1 Morale Level: "");
fire(pir1_morale);
fire(""\n"");

fire(""Pirate 2 Morale Level: "");
fire(pir2_morale);
fire(""\n"");
}
offboard",
"onboard 

void dispCrew(doffy pirate_crew, pint crew_size) {
 fire(""Pirate Crew:\n"");
 four(pint i = 0; i < crew_size; i++) {
 fire(""Pirate "");
 fire(i + 1);
 fire("": "");
 fire(pirate_crew[i]);
 fire(""\n"");
 }
}

captain() {

 doffy pirate_crew = [""Gericke"", ""Waki"", ""Ryan"", ""Hale"", ""Jake"", ""Luwes"", ""Karl""];
 pint crew_size = len(pirate_crew);

 dispCrew(pirate_crew, crew_size);
}

 
offboard",
"onboard 

fleet calBounty(pint pirate_crew, pint crew_size) {
 fleet total_bounty = 0;

 four(pint i = 0; i < crew_size; i++) {
 total_bounty = total_bounty + pirate_crew[i];
 }

 home(total_bounty);
}

captain() {
 pint pirate_crew = [1000000, 1500000, 800000, 2000000, 500000];
 pint crew_size = len(pirate_crew);

 fleet total_bounty = calBounty(pirate_crew, crew_size);

 fire(""The total bounty of the crew is: "");
 fire(total_bounty);
}

 
offboard",
"onboard
void printLine(pint rowNum, pint totalRows) {
 pint spaceCount = totalRows - rowNum - 1;
 pint starCount = 2 * rowNum + 1;
 
 four(pint i = 0; i < spaceCount; i++) {
 fire("" "");
 }
 four(pint i = 0; i < starCount; i++) {
 fire(""*"");
 }
 fire(""\n"");
}

void printDiamond(pint n) {
 four(pint i = 0; i < n; i++) {
 printLine(i, n);
 }
 four(pint i = n - 2; i >= 0; i--) {
 printLine(i, n);
 }
}
captain(){
 pint rows = load(""Enter the number of rows for the upper half of the diamond: "");

 printDiamond(rows);
}
offboard",
"onboard
void collatzSequence(pint n){ 
 whale(n != 1){ 
 fire(n);
 fire("" "");
 theo(n % 2 == 0){
 n = n / 2;
 }
 alt{
 n = 3 * n + 1;
 }
 }
 fire(1);
}
captain(){
 pint num = load(""Enter a positive integer: "");
 
 theo(num <= 0){ 
 fire(""Error: Please enter a positive integer."");
 }
 fire(""Collatz sequence is: "");
 collatzSequence(num);
}
offboard",
"onboard
void FloydsTriangle(pint rows){
 pint number = 1;
 four(pint i = 1; i <= rows; i++){
 four(pint j = 1; j <= i; j++){
 fire(number);
 fire("" "");
 number++;
 }
 fire(""\n"");
 }
}
captain(){
 pint rows = load(""Enter the number of rows for Floyd's triangle: "");
 
 fire(""The Floyd's triangle of the given number of rows: \n"");
 FloydsTriangle(rows);
}
offboard",
"onboard
fleet calculateArea(fleet length, fleet width) {
 home(length * width);
}
captain(){
 fleet length = load(""Enter the length of the rectangle: "");
 fleet width = load(""Enter the width of the rectangle: "");
 
 fire(""The area of the rectangle is: "");
 fire(calculateArea(length, width));
}
offboard",
"onboard
fleet yenToYuan(fleet yenAmount) {
 fleet conversionRate = 0.046;
 home(yenAmount * conversionRate);
}
captain(){
 fleet yenAmount = load(""Enter the amount in Yen: "");
 fire(""The inputted amount in Yuan is: "");
 fire(yenToYuan(yenAmount));
}
offboard",
